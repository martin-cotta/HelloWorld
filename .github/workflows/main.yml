name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  javascript:
    # https://github.com/actions/virtual-environments
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: NPM cache
        # https://github.com/actions/cache/blob/main/examples.md
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM packages
        run: npm install
      - name: Run Unit Tests
        run: npm test
      - name: Bundle React Native code and images (iOS)
        run: |
          mkdir -p ios/bundle
          npx react-native bundle \
            --entry-file index.js \
            --platform ios \
            --dev false \
            --reset-cache \
            --bundle-output "ios/bundle/main.jsbundle" \
            --sourcemap-output "ios/bundle/main.jsbundle.map" \
            --assets-dest "ios/bundle/"
      - name: Bundle React Native code and images (android)
        run: |
          mkdir -p android/bundle
          npx react-native bundle \
            --entry-file index.js \
            --platform android \
            --dev false \
            --reset-cache \
            --bundle-output "android/bundle/main.jsbundle" \
            --sourcemap-output "android/bundle/main.jsbundle.map" \
            --assets-dest "android/bundle/"
      - name: Archive iOS artifacts
        # https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ios-bundle
          path: ios/bundle
      - name: Archive Android artifacts
        uses: actions/upload-artifact@v2
        with:
          name: android-bundle
          path: android/bundle
      - run: ls -l
  android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: NPM cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM packages
        run: npm install
      - name: Download Android artifacts
        uses: actions/download-artifact@v2
        with:
          name: android-bundle
      - name: Build Android Release
        run: cd android && ./gradlew assembleDebug
      - run: ls -l
  ios:
    runs-on: macos-10.15
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: NPM cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install NPM packages
        run: npm install
      - name: Download iOS artifacts
        uses: actions/download-artifact@v2
        with:
          name: ios-bundle
      - name: Cocoapods cache
        uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install Cocoapods dependencies
        run: cd ios && pod install
      - name: Set Default Scheme
        run: |
          cd ios
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          SKIP_BUNDLING: 1
        run: |
          cd ios
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" | xcpretty
      - run: ls -l
      # - name: Test
      #   env:
      #     scheme: ${{ 'default' }}
      #     platform: ${{ 'iOS Simulator' }}
      #   run: |
      #     cd ios
      #     device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
      #     if [ $scheme = default ]; then scheme=$(cat default); fi
      #     if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #     file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #     xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" | xcpretty
